# coreos-vagrant is configured through a series of configuration
# options (global ruby variables) which are detailed below. To modify
# these options, first copy this file to "config.rb". Then simply
# uncomment the necessary lines, leaving the $, and replace everything
# after the equals sign..

# If you'd like to use a discovery url other than the one provided by CoreOS
# Set it here:
#$new_discovery_url='https://discovery.etcd.io/new'

# To automatically replace the discovery token on 'vagrant up', set this
# to true:
#$auto_discovery=false

# Size of the CoreOS cluster created by Vagrant
#$num_instances=1

# Change basename of the VM
# The default value is "core", which results in VMs named starting with
# "core-01" through to "core-${num_instances}".
#$instance_name_prefix="core"

# Official CoreOS channel from which updates should be downloaded
#$update_channel='alpha'

# Log the serial consoles of CoreOS VMs to log/
# Enable by setting value to true, disable with false
# WARNING: Serial logging is known to result in extremely high CPU usage with
# VirtualBox, so should only be used in debugging situations
#$enable_serial_logging=false

# Enable port forwarding of Docker TCP socket
# Set to the TCP port you want exposed on the *host* machine, default is 2375
# If 2375 is used, Vagrant will auto-increment (e.g. in the case of $num_instances > 1)
# You can then use the docker tool locally by setting the following env var:
#   export DOCKER_HOST='tcp://127.0.0.1:2375'
#$expose_docker_tcp=2375

# Enable NFS sharing of your home directory ($HOME) to CoreOS
# It will be mounted at the same path in the VM as on the host.
# Example: /Users/foobar -> /Users/foobar
#$share_home=false

# Enable caching of the vm docker directory to allow for persistent
# installation of docker images. This avoids having to redownload images
# while testing your cloud-init setup
#$cache_docker_images=false

# Configure the size of the device to mount as the vm docker directory
# The filesystem used for docker, btrfs, is known to fail when disk space
# is running low. If you are getting Error: "No space left on device" (ENOSPC)
# try increasing the size of the device.
# [See documentation for coreutils 'dd' command for information on valid sizes]
#$docker_device_size = '10G'

# Provide a list of docker images to install on the vm before loading user-data.
# This will allow for cleaner journal logs while testing since all necesary
# images are already present before starting any tasks.
#$docker_images = [
#  "ubuntu:12.04"
#]

# Customize VMs
#$vm_gui = false
#$vm_memory = 1024
#$vm_cpus = 1
