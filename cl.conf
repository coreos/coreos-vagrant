systemd:
  units:
    - name: docker-tcp.socket
      enable: true
      contents: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=2375
        Service=docker.service
        BindIPv6Only=both

        [Install]
        WantedBy=sockets.target
    - name: usr-local.mount
      enable: true
      contents: |
        [Mount]
        What=/opt/local
        Where=/usr/local
        Options=bind

        [Install]
        WantedBy=multi-user.target
    - name: install-minikube.service
      enable: true
      contents: |
        [Unit]
        Description=Install minikube
        ConditionPathExists=!/usr/local/bin/localkube

        [Service]
        Type=oneshot
        ExecStart=/opt/minikube/install-minikube.sh
        RemainAfterExit=true
        User=core

        [Install]
        WantedBy=multi-user.target
    - name: install-bricks.service
      enable: true
      contents: |
        [Unit]
        Description=Install bricks

        [Service]
        Type=oneshot
        ExecStart=/opt/bricks/install-bricks.sh
        RemainAfterExit=true
        User=core

        [Install]
        WantedBy=multi-user.target
update:
  group: stable
locksmith:
  reboot_strategy: reboot
  #window_start: "Mon 07:00"
  #window_length: "3h"
storage:
  directories:
    - filesystem: "root"
      path: "/opt"
      mode: 0755
    - filesystem: "root"
      path: "/opt/minikube"
      mode: 0755
    - filesystem: "root"
      path: "/opt/bricks"
      mode: 0755
    - filesystem: "root"
      path: "/opt/local"
      mode: 0755
    - filesystem: "root"
      path: "/opt/local/sbin"
      mode: 0755
    - filesystem: "root"
      path: "/opt/local/lib64"
      mode: 0755
    - filesystem: "root"
      path: "/opt/local/lib"
      mode: 0755
    - filesystem: "root"
      path: "/opt/local/bin"
      mode: 0755
  files:
    - filesystem: "root"
      path: "/etc/systemd/network/00-eth1.network.d/domain.conf"
      mode: 0755
      contents:
        inline: |
          [Network]
          Domains=vagrant.amobee.com
    - filesystem: "root"
      path: "/opt/bricks/install-bricks.sh"
      mode: 0755
      contents:
        inline: |
          #!/bin/bash -e

          # Wait for NFS mounts
          for i in {1..150}; do # timeout for 5 minutes
            if [ -n "$(/bin/ls -d /Users/* 2>/dev/null)" ]; then
              break
            fi
            echo "Waiting for NFS mounts..."
            sleep 2
          done

          DOCKER_VERSION=$(docker version -f {{.Client.Version}})
          echo "Docker client version to install ${DOCKER_VERSION}"

          USER_HOME=$(echo /Users/* | head -1)
          DOCKER=${HOME}/.docker
          mkdir -p $DOCKER

          URL=https://download.docker.com/mac/static/edge/$(uname -m)/docker-${DOCKER_VERSION}.tgz

          echo "Fetching docker image from $URL"
          curl -s -o - $URL | tar xzf - -O docker/docker > ${DOCKER}/docker

          sudo chmod +x ${DOCKER}/docker

          mkdir -p ${USER_HOME}/.bricks/bin
          cp -af ${DOCKER}/docker ${USER_HOME}/.bricks/bin/docker
          rm -rf $DOCKER
    - filesystem: "root"
      path: "/opt/minikube/install-minikube.sh"
      mode: 0755
      contents:
        inline: |
          #!/bin/bash -e

          # Wait for NFS mounts
          for i in {1..150}; do # timeout for 5 minutes
            if [ -n "$(/bin/ls -d /Users/* 2>/dev/null)" ]; then
              break
            fi
            echo "Waiting for NFS mounts..."
            sleep 2
          done

          export MK=/usr/local/bin/minikube
          export KUBECTL=/usr/local/bin/kubectl
          USER_HOME=$(echo /Users/* | head -1)
          VAGRANT=${USER_HOME}/.bricks/clusters/vagrant

          sudo curl -Lo $MK https://storage.googleapis.com/minikube/releases/v0.24.1/minikube-linux-amd64 && sudo chmod +x $MK
          sudo curl -Lo $KUBECTL https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && sudo chmod +x $KUBECTL

          export MINIKUBE_WANTUPDATENOTIFICATION=true
          export MINIKUBE_WANTREPORTERRORPROMPT=false
          export MINIKUBE_WANTKUBECTLDOWNLOADMSG=false
          export MINIKUBE_HOME=$USER_HOME/.bricks/clusters/vagrant
          export CHANGE_MINIKUBE_NONE_USER=true

          export KUBECONFIG=$HOME/vagrant/kubeconfig.yaml

          rm -rf $HOME/vagrant
          mkdir -p $HOME/vagrant
          mkdir -p $USER_HOME/.bricks/clusters
          rm -rf $USER_HOME/.bricks/clusters/vagrant
          ln -s $HOME/vagrant $USER_HOME/.bricks/clusters/vagrant

          sudo -E $MK start --vm-driver=none --loglevel 0 --logtostderr

          set -x

          rm -rf $VAGRANT
          cp -af $HOME/vagrant $VAGRANT
          rm -rf $HOME/vagrant
          mkdir -p $HOME/.kube
          ln -s $USER_HOME/.bricks/clusters/vagrant/kubeconfig.yaml $HOME/.kube/config
          ln -s $USER_HOME/.bricks/clusters/vagrant/.minikube $HOME/.minikube
          unset KUBECONFIG

          # this for loop waits until kubectl can access the api server that Minikube has created
          for i in {1..150}; do # timeout for 5 minutes
             $KUBECTL get po &> /dev/null || true
             if [ $? -ne 1 ]; then
                break
            fi
            sleep 2
          done

# vim:ft=yaml
